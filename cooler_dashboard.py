# Save this code as 'cooler_dashboard.py' in your project directory
# For example, in 'C:/Users/Asus/Downloads/Video/IOT/hydrolic/'

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set page configuration (optional, for wider layout)
st.set_page_config(layout="wide")

# Title of the Streamlit app
st.title("ðŸ“Š Industrial Cooler Failure Prediction Dashboard")

st.markdown("This dashboard presents the results of a Machine Learning model trained to predict cooler failures based on sensor data.")

# Model Summary Statistics (These values are hardcoded for demonstration; in a real app, they'd be dynamic)
st.subheader("1. Model Prediction Summary")
col1, col2 = st.columns(2)
with col1:
    st.markdown("""
    #### Prediction Counts:
    - **True Positives (Actual Failure, Predicted Failure):** 288
    - **True Negatives (Actual Sane, Predicted Sane):** 148
    - **False Positives (Actual Sane, Predicted Failure):** 0
    - **False Negatives (Actual Failure, Predicted Sane):** 0
    """)
with col2:
    st.markdown("""
    #### Key Performance Metrics:
    - **Overall Accuracy:** 100%
    - **Precision (Failure Class):** 100%
    - **Recall (Failure Class):** 100%
    - **F1-Score (Failure Class):** 100%
    """)

# Load evaluation data (this file must be generated by your Jupyter notebook first)
try:
    # Adjust this path if 'evaluation.csv' is not in the same directory as this script
    # Make sure this path is the SAME as the output_path in your Jupyter notebook
    df_eval = pd.read_csv("C:/Users/Asus/Downloads/Video/IOT/hydrolic/evaluation.csv") 
    
    st.subheader("2. Prediction Trend Over Time")
    st.write("This chart visualizes the model's predicted failure probability against the actual cooler status over time.")
    
    fig_prob, ax_prob = plt.subplots(figsize=(15, 6))
    # Smooth the probability for better visualization in Streamlit
    smooth_prob = df_eval["Probability"].rolling(window=10, min_periods=1).mean()
    sns.lineplot(data=smooth_prob, label="Smoothed Predicted Probability", color="red", ax=ax_prob)
    sns.lineplot(data=df_eval["Actual"], label="Actual Cooler Failure (0=Sane, 1=Failure)", color="black", alpha=0.6, ax=ax_prob)
    ax_prob.set_ylabel("Failure Probability / Actual Status")
    ax_prob.set_xlabel("Sample Index")
    ax_prob.set_title("Model Prediction Probability vs. Actual Status")
    ax_prob.legend()
    ax_prob.grid(True, linestyle="--", alpha=0.4)
    st.pyplot(fig_prob)

    st.subheader("3. Raw Prediction Details")
    st.write("Below is a detailed table showing each prediction, its probability, and classification type.")
    st.dataframe(df_eval)

except FileNotFoundError:
    st.warning("Error: 'evaluation.csv' not found. Please ensure your Jupyter notebook has been run to generate this file in the correct directory.")
except Exception as e:
    st.error(f"An unexpected error occurred while loading or plotting data: {e}")

st.sidebar.header("About the Model")
st.sidebar.info("""
This dashboard uses a Random Forest Classifier. Key features include:
- **TS4**: Temperature Sensor 4 data.
- **TS4_MA30**: 30-second Moving Average of TS4.
- **TS4_diff**: Rate of change of TS4.
- **PS5**: Pressure Sensor 5 data.

The model was trained using a 80/20 train-test split with stratification for balanced classes.
""")

st.sidebar.header("Contact")
st.sidebar.markdown("For questions or collaborations, feel free to reach out!")